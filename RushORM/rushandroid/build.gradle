apply plugin: 'com.android.library'
apply plugin: 'android-maven'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 1
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':rushcore')
}

android.libraryVariants.all { variant ->
    task("jar${variant.name.capitalize()}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        // RushAndroid files
        from variant.javaCompile.destinationDir
        // RushCore files
        from configurations.compile.findAll {
            it.getName() != 'android.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('hamcrest')
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        from "../../LICENSE.md"
        from "../../README.md"
        exclude '**/R.class', '**/R$*.class', '**/BuildConfig.class', '**/BuildConfig$*.class', '**/R.html', '**/R.*.html'
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equalsIgnoreCase("debug")) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source + project(':rushcore').sourceSets.main.allJava
        ext.androidJar = files(plugins.findPlugin("com.android.library").getBootClasspath())
        classpath = files(variant.javaCompile.classpath.files) + ext.androidJar
        exclude '**/internal/**'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        failOnError false
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}